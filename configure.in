dnl Process this file with autoconf to produce a configure script.

dnl set version
m4_define([glimmer_doc_major_version], [0])
m4_define([glimmer_doc_minor_version], [5])
m4_define([glimmer_doc_micro_version], [5])
m4_define([glimmer_doc_version],
	[glimmer_doc_major_version.glimmer_doc_minor_version.glimmer_doc_micro_version])

AC_INIT([glimmer-doc],[glimmer_doc_version],[glimmer-discuss@forge.nesc.ac.uk])
AM_INIT_AUTOMAKE

dnl minimum required glimmer version
min_glimmer_major_version=0
min_glimmer_minor_version=5
min_glimmer_micro_version=3

GLIMMER_DOC_MAJOR_VERSION=glimmer_doc_major_version
GLIMMER_DOC_MINOR_VERSION=glimmer_doc_minor_version
GLIMMER_DOC_MICRO_VERSION=glimmer_doc_micro_version
GLIMMER_DOC_VERSION=glimmer_version
AC_SUBST(GLIMMER_DOC_MAJOR_VERSION)
AC_SUBST(GLIMMER_DOC_MINOR_VERSION)
AC_SUBST(GLIMMER_DOC_MICRO_VERSION)
AC_SUBST(GLIMMER_DOC_VERSION)

dnl Checking for python
AM_PATH_PYTHON([2.3],,[AC_MSG_RESULT(need at least python 2.3)])

dnl checking for glimmer prefix
AC_ARG_WITH(glimmer-prefix,[  --with-glimmer-prefix=PFX   Prefix where GLIMMER is installed (optional)],
            glimmer_config_prefix="$withval", glimmer_config_prefix="")

if test x$glimmer_config_prefix != x ; then
     glimmer_config_args="$glimmer_config_args --prefix=$glimmer_config_prefix"
     if test x${GLIMMER_CONFIG+set} != xset ; then
        GLIMMER_CONFIG=$glimmer_config_prefix/bin/glimmer-config
     fi
fi

AC_PATH_PROG(GLIMMER_CONFIG, glimmer-config, no)
if ! test -x "$GLIMMER_CONFIG"; then
  GLIMMER_CONFIG="no"
fi
if test "$GLIMMER_CONFIG" = "no" ; then
  AC_MSG_ERROR([Could not find glimmer-config])
fi

dnl Checking for version of glimmer
min_glimmer_version=$min_glimmer_major_version.$min_glimmer_minor_version.$min_glimmer_micro_version
AC_MSG_CHECKING(for GLIMMER - version >= $min_glimmer_version)
no_glimmer="no"
GLIMMER_CFLAGS=`$GLIMMER_CONFIG $glimmer_config_args --fcflags`
GLIMMER_LIBS=`$GLIMMER_CONFIG $glimmer_config_args --libs`
glimmer_config_major_version=`$GLIMMER_CONFIG $glimmer_config_args --version | \
       sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
glimmer_config_minor_version=`$GLIMMER_CONFIG $glimmer_config_args --version | \
       sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
glimmer_config_micro_version=`$GLIMMER_CONFIG $glimmer_config_args --version | \
       sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
AC_MSG_RESULT([$glimmer_config_major_version.$glimmer_config_minor_version.$glimmer_config_micro_version])
if test  "$min_glimmer_micro_version" -gt "$glimmer_config_micro_version"; then
    no_glimmer="yes"
fi
if test  "$min_glimmer_minor_version" -gt "$glimmer_config_minor_version"; then
    no_glimmer="yes"
elif test  "$min_glimmer_minor_version" -lt "$glimmer_config_minor_version"; then
    no_glimmer="no"
fi
if test  "$min_glimmer_major_version" -gt "$glimmer_config_major_version"; then
    no_glimmer="yes"
elif test "$min_glimmer_major_version" -lt "$glimmer_config_major_version"; then
    no_glimmer="no"
fi
if test "$no_glimmer" = "yes" ; then
  AC_MSG_ERROR([GLIMMER version too old])
fi

GLIMMER_PREFIX=`$GLIMMER_CONFIG $glimmer_config_args --prefix`
AC_SUBST(GLIMMER_PREFIX)


AC_CHECK_PROGS(LATEX,[latex])
AC_CHECK_PROGS(BIBTEX,[bibtex])
AC_CHECK_PROGS(DVIPS,[dvips]) 
AC_CHECK_PROGS(DVIPDFT,[dvipdft dvipdfm]) 
AC_CHECK_PROGS(GNUPLOT,[gnuplot]) 
AC_CHECK_PROGS(DIA,[dia]) 
AC_CHECK_PROGS(FIG2DEV,[fig2dev]) 
AC_CHECK_PROGS(PS2EPSI,[ps2epsi]) 
AC_CHECK_PROGS(SED,[sed])
AM_CONDITIONAL([DO_DOC_PS],  [test "$DVIPS" != ""])
AM_CONDITIONAL([DO_DOC_PDF], [test "$DVIPDFT" != ""])

# looking for glimmer-tests
dotools=false
AC_ARG_WITH(glimmertests,AS_HELP_STRING([--with-glimmertests],[location where glimmer-tests is installed]),[GLIMMER_TESTS=$withval])
if test "$GLIMMER_TESTS" != ""; then
  AC_MSG_RESULT(glimmer_tests location: $GLIMMER_TESTS)

  # checking if PyCF is installed
  AC_CHECK_PROGS(PLOTCFVAR,[plotCFvar.py])
  # checking if the tests were run
  AC_CHECK_FILE($GLIMMER_TESTS/eis/fenscan.nc,have_fenscan_nc="yes",have_fenscan_nc="no")
  AC_CHECK_FILE($GLIMMER_TESTS/eis/fenscan.2000a.nc,have_fenscan2_nc="yes",have_fenscan2_nc="no")
  AC_CHECK_FILE($GLIMMER_TESTS/eis/fenscan-gthf.nc,have_fenscan_gthf_nc="yes",have_fenscan_gthf_nc="no")

  AC_SUBST(GLIMMER_TESTS)

  if test "$have_fenscan_nc" == "yes" -a "$have_fenscan2_nc" == "yes" -a "$have_fenscan_gthf_nc" == "yes" -a "$PLOTCFVAR" != ""; then
    dotools=true
  fi
fi
AC_MSG_CHECKING([whether we can build PyCF documentation])
if test "$dotools" == "true" ; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi
AM_CONDITIONAL([HAVE_PYCF],[test "$dotools" == "true"])
AC_SUBST(dotools)

dnl checking if the RSL data base is present
AC_CHECK_FILE($GLIMMER_PREFIX/share/PyCF/rsl.db,have_rsl_db="true",have_rsl_db="false")
AM_CONDITIONAL([HAVE_RSL_DB], [test "$have_rsl_db" == "true"])
AC_SUBST(have_rsl_db)

AC_CONFIG_FILES([Makefile doc/Makefile doc/common/Makefile doc/dg/Makefile doc/dg/figures/Makefile \
		doc/ug/Makefile doc/ug/figs/Makefile doc/num/Makefile doc/num/figs/Makefile doc/num/gnu/Makefile \
                doc/tg/Makefile doc/tg/figures/Makefile])
AC_OUTPUT([doc/glimmer.tex doc/common/version.tex doc/tg/rsl.tex])
